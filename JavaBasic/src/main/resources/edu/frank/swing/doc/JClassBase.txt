Java面向对象程序设计

Java中没有像C或C++中的Struct结构体，Java程序都是基于类实现的。
类是Java中的基本结构。类包括两个成员要素：域(field)和方法(method)。
域定义了类所需要的数据，方法定义了类的功能。
  
类中的引用与调用：
1.引用数据类型
引用数据类型同样具有基本数据类型的四个属性：变量名、数据类型、存储
单元和变量值。在引用数据类型变量存储单元内存放的变量值是引用，即指
向实例的索引。引用数据类型变量的默认值为null
2.调用类成员与方法
⑴成员的调用与成员的作用域有关，类作用域的成员可以直接调用，当出现
同名覆盖时可以使用关键字this调用，格式为：this.成员

⑵引用数据类型的调用解决了Java中没有C或C++中的"&"符号问题

⑶调用同一个类或其父类的方法时，直接调用即可。调用不同一个类的方法，
应该先创建该类的实例，然后用运算符"."调用。
格式：实例.方法名(实参列表)
如果所要调用的方法是一个静态方法时，也可以直接通过一下方式
类名.方法名(实参列表)
在执行时，方法调用的参数传递方式是值传递的。
		
类的一些特殊方法：
1.构造方法
构造方法可有可无，一般用来初始化一些参数和窗体等等。值得注意的是，
它没有返回类型，包括"void"类型
2.finalize方法和System.gc方法
Java没有析构方法，但是提供了"protected void finalize()"。Java使用
自动回收垃圾机制。判断一个存储单元是否是垃圾的依据是该存储单元所对
应的对象是否仍为程序所使用。而判断一个对象是否仍为程序所使用的一句
是是否有引用指向该对象。Java系统另外提供了方法"System.gc()"来强制回
收垃圾(并不保证立刻进行垃圾回收)。Java虚拟机在即将回收对象存储单元
之前可能会先调用该对象的finalize方法。如果该对象没用定义finalize方
法，则Java系统可能会调用该对象的默认finalize方法。但Java系统并不保
证在回收该对象存储单元之前一定会调用finalize方法。所以程序不应当依
赖于finalize方法来记录程序对内存资源的占用的情况。
3.Java中的递归方法
一个类的成员方法直接或间接的调用其本身，就称为递归方法调用，采用
这种方法编写的方法就叫做递归方法。如下面的例子
explam：
      /*
       *递归方法实例
       */
int Fibonacci(int n)
{
     if(n == 1||n == 2)
	return 1;
     else
	return(Fibonacci(n-1)+Fibonacci(n-2));//递归调用本身方法
 }
4.Java中的压缩方法
Java中的压缩方法命令格式：
    jar -cvf 压缩后的文件名(以.jar为后缀)被压缩的文件或目录列表
Java中的解压方法命令格式：
    jar -xvf 压缩后的文件名(以.jar为后缀)
Java压缩文件运行命令格式：
    java -cp 压缩后的文件名(以.jar为后缀) 程序名

另外一种压缩机制：
	建立文本文件(标明文件)，内容为Main-Class:程序名
压缩：
    jar -cvfm 压缩后的文件名(以.jar为后缀) 标明文件名 被压缩的文
    件或目录列表
运行：
    java -jar 压缩后的文件名(以.jar为后缀)
类的三大特性：
1.继承性
2.多态性
3.封装性⑵⑶⑷⑸
类中出现的一些修饰词：
		
   