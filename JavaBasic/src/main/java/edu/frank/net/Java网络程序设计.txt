Java网络程序设计
----------------------------------
简述
-----	
	在网络上，计算机通过IP（Internet Protocol，网际协议）地址标识。网络资源定位器
（URL，Uniform Resource Locator）可以指向各种网络资源，同时获取各种资源。在网络上
常用的通信协议是TCP（Transfer Control Protocol，传输控制协议）和UDP（User Datagram
Protocol，用户数据报协议）。

------------------
使用方式
---------
1.网络地址（InetAddress）
	//使用4字节网络地址构造InetAddress实例对象
	public static InetAddress getByAddress(byte[] addr) throws UnknowHostException
	//使用域名构造InetAddress实例对象
	public static InetAddress getByName(String host) throws UnknowHostException
	
	//InetAddress对象包含的常用方法
	String strHost = "www.tsinghua.edu.cn";
	InetAddress net_addr = null;
	try{
		net_addr = InetAddress.getByName(strHost);
	}catch(UnknowHostException ex){
		ex.printStackTrace();
	}
	if (null != net_addr){
		net_addr.getHostAddress();	//获取IP地址
		net_addr.getHostName();	//获取主机域名
	}
	
2.网络资源定位器（URL）
	网络资源定位器通常由5个部分组成：协议（Protocol）、主机（Host）、端口号（Port）
	文件（File）和引用（Reference,section,anchor）
	常见的端口号有：
	HTTP端口号 80
	HTTPS端口号 443
	Time端口是 37
	Telnet端口号 23
	POP3的端口号110
	SMTP端口号 25
	5个部分在网络资源定位器中的格式：
	协议://主机:端口号/文件#引用
	public final InputStream openStream() throws IOException
	该方法可以将网络资源当做一种特殊的数据流进行处理，读取网络数据流的常见步骤：
	(1) 创建URL实例，初始化网络资源
	(2) 通过openStream()方法，建立URL连接，返回数据流对象引用
	(3) 通过BufferedInputStream或者BufferedReader封装输入流
	(4) 读取数据，并对数据进行处理
	(5) 关闭输入流
	try{
		URL url = 
		new URL("http://www.114la.com:8080/image/amazon_120.gif#my_img");//初始化网络资源
		url.getProtocol();//获取网络协议 http
		url.getHost();//获取主机 www.114la.com
		url.getDefaultPort();//获取端口 8080
		url.getFile();//获取文件 /image/amazon_120.gif
		url.getRef();//获取引用 my_img
		url.getPath();//获取路径 /image/amazon_120.gif
		// 获取网络资源
		BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
		String strRecvMsg = null;
		while((strRecvMsg = br.readLine()) != null)
			System.out.println(strRecvMsg);
		br.close();
	}catch(IOException ex_io){
		ex_io.printStackTrace();
	}catch(MalformedURLException ex){
		ex.printStackTrace();
	}

3.基于TCP的网络程序设计
	TCP（Transfer Control Protocol，传输控制协议）是基于连接的，提供计算机之间可靠的数据传输
	TCP模型
			服务端										客户端
		ServerSocket(端口号)							Socket(主机,端口号)
		ServerSocket.accept()						OutputStream
		OutputStream								InputStream
		InputStream									Socket.close()
		Socket.close()
		
	TCP服务端程序设计步骤：
	(1) 创建ServerSocket实例对象，注册在服务端进行连接的端口号和最大客户数目
	(2) 调用accept()监听客户端连接，如有连接，返回客户端Socket实例
	(3) 通过Socket实例，调用getInputStream和getOutputStream方法获取对应的输入流和输出流
	(4) 通过输入流和输出流与客户端通信
	(5) 通信完毕，关闭输入流、输出流和Socket
	ServerSocket server = null;
	try{
		server = new ServerSocket(8100);
	}catch(IOException ex_io){
		ex_io.printStackTrace();
	}
	try{
		Socket socket = server.accept();
		PrintWriter pw = new PrintWriter(new BufferedWriter(
			new OutputStreamWriter(socket.getOutputStream(),"GBK")
			),true);	//获取输出流
		BufferedReader br = new BufferedReader(new InputStreamReader(
			socket.getInputStream(),"GBK"));	//获取输入流
		//与客户端通信处理
	}catch(IOException ex_io){
		ex_io.printStackTrace();
	}finally{
		socket.close();
	}
	
	TCP客户端程序设计步骤：
	(1) 创建Socket实例对象
	(2) 通过Socket实例，调用getInputStream和getOutputStream方法获取对应的输入流和输出流
	(3) 通过输入流和输出流与服务端通信
	(4) 通信完毕，关闭输入流、输出流和Socket
	Socket client = null;
	try{
		client = new Socket("localhost",8100);
		PrintWriter pw = new PrintWriter(new BufferedWriter(
			new OutputStreamWriter(client.getOutputStream(),"GBK")
			),true);	//获取输出流
		BufferedReader br = new BufferedReader(new InputStreamReader(
			socket.getInputStream(),"GBK"));	//获取输入流
		//与服务端通信处理
	}catch(IOException ex_io){
		ex_io.printStackTrace();
	}finally{
		socket.close();
	}
4.基于UDP的网络程序设计
	UDP(User Datagram Protocol，用户数据报协议)，是不可靠无连接传输协议
	UDP模型：
							服务端/客户端
						创建DatagramSocket实例对象
						DatagramSocket.send(DatagramPacket)
						DatagramSocket.receive(DatagramPacket)
							DatagramSocket.close()
	
	DatagramSocket dataSocket = null;	//UDP Socket
	InetAddress inetAddr = InetAddress.getByName("localhost");	//通信主机
	int nPort = 5555;	//通信主机端口
	InetAddress inetClientAddr = null;	//连接主机
	int nClientPort = -1;	//连接主机端口
	DatagramPacket recvPacket = null;	//接收数据报
	DatagramPacket sendPacket = null;	//发送数据报
	byte[] recvBuffer = new byte[1024];	//接收内容缓冲
	byte[] sendBuffer = null;	//发送内容缓冲
	String strRecvMsg = null;	//接收内容
	String strSendMsg = null;	//发送内容
	try{
		dataSocket = new DatagramSocket(5555);
		while(true){
			//接收数据
			recvPacket = new DatagramPacket(
					recvBuffer,0,recvBuffer.length);
			if (null != recvPacket){
				recvPacket = dataSocket.receive();
				inetClientAddr = recvPacket.getAddress();
				nClientPort = recvPacket.getPort();
				strRecvMsg = new String(recvPacket.getData(),0,recvPacket.getLength());
				System.out.println("recv - " + "IP:" + inetClientAddr.getHostName() + 
					" Port:" + nClientPort + " Msg:" + strRecvMsg);
			}
			
			//发送数据
			strSendMsg = "Hello World";
			sendBuffer = strMsg.getByte("ISO8859_1");	//对字符进行编码
			sendPacket = new DatagramPacket(sendBuffer,0,sendBuffer.length,inetAddr,nPort);
			dataSocket.send(sendPacket);
		}
	}catch(IOException ex){
		ex.printStaceTrace();
	}