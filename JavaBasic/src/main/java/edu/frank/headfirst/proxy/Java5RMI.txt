RMI远程调用(二)基于JDK1.5  

2009-04-18 16:15:59|  分类： java |举报|字号 订阅
     之前写过一篇基于JDK1.4的远程调用小实例，这里写的这个远程调用的小实例是基于JDK1.5的，JDK1.5下面写远程调用与JDK1.4的有比大的区别，也比JDK1.4写得要更容易些。

     JDK1.4下的远程调用中，在编写好服务器端所有的类之后，需要用rmic这个JAVA的命令生成存根类和骨架类。存根类是给客户端用的，骨架类是给服务器端用的。在JDK1.5中不需要生成这两个类，当然不是不要这两类所实现的功能，只是JDK1.5中是运行时动态生成，程序开发人员不用在手动去生成存根类和骨架类。

    存根类的功能：当客户端调用远程对象的一个方法时，实际上是调用本地存根对象的相应方法，这个存根就是上面生成的根，存根对象与远程对象具有同样的接口。存根对象采用一种与平台无关的编码方式，把方法的参数编 码为字节序列，这个编码过程称参数编组。

    骨架类的功能：骨架类没有实现远程接口，骨架类在服务器端为远程对象接收客户的方法调用请求。

    下面提供一个实例说明JDK1.5下的RMI应用

一、服务器端

     远程接口：

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.Date;

/**
 * 自定义的远程接口，必须继承远程接口，所有的方法都必须抛出远程异常
 *
 */
public interface IHelloService extends Remote {

 User user=null;
 public String echo(String msg) throws RemoteException;
 public Date getTime() throws RemoteException;
 public void setUser(User user) throws RemoteException;
 public User getUser() throws RemoteException;
}

   远程对象：

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.Date;

/**
 * 远程对象，必须实现自定义的远程接口和继承UnicastRemoteObject类
 */
public class HelloServiceImpl extends UnicastRemoteObject implements
  IHelloService {

 private String name;
 private User user;
 public HelloServiceImpl(String name) throws RemoteException
 {
  this.name=name;  
 }
 public String echo(String msg) throws RemoteException {

  System.out.println(name+"：调用echo()方法");
  return "echo:"+msg+" from "+name;
 }

 public Date getTime() throws RemoteException {
  System.out.println(name+":调用getTime()方法");
  return new Date();
 }
 
 
 public User getUser() throws RemoteException {
  
  return user;
 }
 public void setUser(User user) throws RemoteException {

  this.user=user;
  
 }

}

注意：远程对象如果已经继承了别的类，而无法继承UnicastRemoteObject 类，则可以在其构造方法中

调用UnicastRemoteObject.exportObject(this,0)方法即可以

 

   服务器端启动类

import java.rmi.registry.LocateRegistry;

import javax.naming.Context;
import javax.naming.InitialContext;

public class SimpleServer {

 /**
  * @param args
  */
 public static void main(String[] args) throws Exception {

  User user1=new User();
  user1.setUsername("user1");
  user1.setAddress("address1");
  user1.setAge(25);
  
  User user2=new User();
  user2.setUsername("user2");
  user2.setAddress("address2");
  user2.setAge(26);
  
  IHelloService service1=new HelloServiceImpl("service1");
  IHelloService service2=new HelloServiceImpl("service2");
  
  service1.setUser(user1);
  service2.setUser(user2);
  
  //在主机上激活或者说注册25001这个端口，使其被占用，或启动的意思
  LocateRegistry.createRegistry(25001);
  
  //初始化上下文
  Context namingCtx=new InitialContext();
  
  //将两个远程对象，注册到上下文中。
  //namingCtx.bind参数：
  //第一个参数是检索远程对象的rmi地址，规则：rmi://主机名或域名或IP：端口/远程对象名
  //25001端口是服务器上注册来的，如果不加端口号，其实注册的默认端口是1099，为了
  //避免端口冲突，我们选了25001作端口号，但这个端口号需要注册，
  //在命令台中进入这个服务主类的目录:
  //执行start rmiregistry 25001;当然我们在上面LocateRegistry.createRegistry(25001);
  //中注册了该端口号，就不用在在命令台注册了，即不用运行start rmiregistry了。如果没有在程序中注册就必须在命令台下运行start rmiregistry 端口号

  //如果采用默认的1099，就直接start rmiregistry即可;
  namingCtx.bind("rmi://localhost:25001/HelloService1", service1);
  namingCtx.bind("rmi://localhost:25001/HelloService2", service2);
  
  System.out.println("服务器注册了两个HelloService");
 }

}

  自定义User类

import java.io.Serializable;

public class User implements Serializable {

 private String username;
 private String address;
 private int age;
 public String getUsername() {
  return username;
 }
 public void setUsername(String username) {
  this.username = username;
 }
 public String getAddress() {
  return address;
 }
 public void setAddress(String address) {
  this.address = address;
 }
 public int getAge() {
  return age;
 }
 public void setAge(int age) {
  this.age = age;
 }
 

二、客户端

import java.rmi.RemoteException;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NameClassPair;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;

import com.myrmi.IHelloService;
import com.myrmi.User;

/**
 * 远程调用的客户端测试
 */
public class SimpleClient {

 public static void showRemoteObject(Context namingCtx) throws Exception
 {
  //列出指定地址的远程对象列表，地址规则：远程对象注册的地址截去远程对象名，余下的部分即是
  NamingEnumeration<NameClassPair> e=namingCtx.list("rmi://localhost:25001/");
  
  while(e.hasMore())
  {
   System.out.println(e.next().getName());
  }
 }
 
 /**
  * @param args
  */
 public static void main(String[] args) {

  //远程调用的地址
  String url="rmi://localhost:25001/";
  Context namingCtx;
  try {
   namingCtx = new InitialContext();
   
   //检索两个远程对象
   IHelloService service1=(IHelloService) namingCtx.lookup(url+"HelloService1");
   IHelloService service2=(IHelloService) namingCtx.lookup(url+"HelloService2");
   
   //service1.getClass返回的是“$Proxy0”的动态代理实例，这个实例就是远程对象在
   //客户端的存根对象,这个存根才可以与服务器进行通信。
   Class stubClass=service1.getClass();
   System.out.println("service1是"+stubClass.getName()+"的实例");
   
   
   //获取远程对象实现的所有接口
   Class[] interfaces=stubClass.getInterfaces();
   for(int i=0;i<interfaces.length;i++)
   {
    System.out.println("存根类实现了"+interfaces[i].getName());
   }
   
   //获取User ，测试远程传输自定义对象的能力
   User user1=service1.getUser();
   User user2=service2.getUser();
   
   System.out.println("-------------service1-----------------");
   System.out.println(service1.echo("hello"));
   System.out.println(service1.getTime());
   
   System.out.println(user1.getUsername());
   System.out.println(user1.getAddress());
   System.out.println(user1.getAge());
   
   System.out.println("--------------service2----------------");
   System.out.println(service2.echo("hello"));
   System.out.println(service2.getTime());
   

   System.out.println(user2.getUsername());
   System.out.println(user2.getAddress());
   System.out.println(user2.getAge());
   
   System.out.println("------------显示某台远程主机上某端口上注册的所有远程对象名------------------");
   showRemoteObject(namingCtx);
   
  } catch (NamingException e) {
   // TODO Auto-generated catch block
   e.printStackTrace();
  } catch (RemoteException e) {
   // TODO Auto-generated catch block
   e.printStackTrace();
  } catch (Exception e) {
   // TODO Auto-generated catch block
   e.printStackTrace();
  }
  

 }

}

三、运行方式

首先，启动rmiregistry，在命令台下进入服务器启动类的包的根目录，如C:\bin\com.myrmi包下的SimpleServer.class是服务器类，则命令台中先进入c:\bin目录，然后执行:

start rmiregistry

其次，运行SimpleServer类，即启动服务器端，注册远程对象，命令

java SimpleServer

最后，运行SimpleClient类，测试是否调用到远程服务器上的对象

注意：上述的测试方法是客户端类与服务器类在同一个工程中的方法，如果客户类与服务端类不在同一工程中，则需要将服务器端的远程接口和接口中引用到的类打成jar包提供给客户端工程。这样才可以开发出客户端来，不然客户端会缺失远程接口和接口中引用的类，根本无法编译。

       另外，远程接口中引用的类必须是可序列化的，就是实现Serializable接口，这样在传输到客户端时才能被使用，否则会报错。